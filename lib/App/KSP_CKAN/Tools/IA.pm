package App::KSP_CKAN::Tools::IA;

use v5.010;
use strict;
use warnings;
use autodie;
use Method::Signatures 20140224;
use LWP::UserAgent;
use File::MimeInfo::Magic 'mimetype';
use Scalar::Util 'reftype';
use HTTP::Request::StreamingUpload;
use Encode;
use Moo;
use namespace::clean;

# ABSTRACT: An abstraction to the Internet Archive S3 like interface

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  use App::KSP_CKAN::Tools::IA;

  my $IA = App::KSP_CKAN::Tools::IA->new( config => $config );

=head1 DESCRIPTION

Provides a light wrapper to the Internet Archives' S3 like interface.

=cut

my $Ref = sub {
    croak("auth isn't a 'App::KSP_CKAN::Tools::Config' object!") unless $_[0]->DOES("App::KSP_CKAN::Tools::Config");
};

has 'config'      => ( is => 'ro', required => 1, isa => $Ref );
has 'collection'  => ( is => 'ro', default => sub { 'test_collection' } );
has 'mediatype'   => ( is => 'ro', default => sub { 'software' } );
has 'iaS3uri'     => ( is => 'rw', default => sub { 'https://s3.us.archive.org' } );
has '_ua'         => ( is => 'rw', lazy => 1, builder => 1 );
has '_ias3keys'   => ( is => 'ro', lazy => 1, builder => 1 );

method _build__ua {
  my $ua = LWP::UserAgent->new();
  $ua->agent('upload_via_KSP-CKAN/NetKAN-bot');
  $ua->timeout(20);
  $ua->env_proxy;
  $ua->default_headers->push_header( 'authorization' => "LOW ". $self->_ias3keys);
  return $ua;
}

method _build__ias3keys {
  my $config = $self->config;
  return $config->IA_access.":".$config->IA_secret;
}

method _uri($ckan) {
  $self->logdie("\$ckan isn't a 'App::KSP_CKAN::Metadata::Ckan' object!") unless $ckan->DOES("App::KSP_CKAN::Metadata::Ckan");
  return $self->iaS3uri."/".$ckan->mirror_item."/".$ckan->mirror_filename;
}

method _description($ckan) {
  my $description = $ckan->abstract;
  $description .= "<br><br>Homepage: <a href=\"".$ckan->homepage."\">".$ckan->homepage."</a>" if $ckan->homepage;
  $description .= "<br>Repository: <a href=\"".$ckan->repository."\">".$ckan->repository."</a>" if $ckan->repository;
  $description .= "<br>License(s): @{$ckan->licenses}" if $ckan->license;
  return $description;
}

method _archive_header( $header, $value ) {
  # Credit for logic to: https://github.com/kngenie/ias3upload
  if (reftype \$value ne "SCALAR") {
    if ($#{$value} == 0) {
      return ('x-archive-meta-' . $header, encode('UTF-8', $value->[0]));
    } else {
      my $i = 1;
      return map((sprintf('x-archive-meta%02d-%s', $i++, $header), encode('UTF-8',$_)), @{$value});
    }
  } else {
    return ('x-archive-meta-' . $header, encode('UTF-8',$value));
  }
}

method _put_headers ( $file, $ckan ) {
  $self->logdie("\$ckan isn't a 'App::KSP_CKAN::Metadata::Ckan' object!") unless $ckan->DOES("App::KSP_CKAN::Metadata::Ckan");
  my $mimetype = mimetype( $file );

  my $headers = HTTP::Headers->new(
    'Content-Type'                => $mimetype,
    'Content-Length'              => -s $file,
    $self->_archive_header('collection', $self->collection),
    $self->_archive_header('creator', \@{$ckan->authors}),
    $self->_archive_header('subject', "ksp; kerbal space program; mod"),
    $self->_archive_header('title', $ckan->name." - ".$ckan->version),
    $self->_archive_header('description', $self->_description($ckan)),
    $self->_archive_header('mediatype', $self->mediatype),
  );
  
  # TODO: oh gosh, this looks more complicated than it needs to be.
  # Note: It's like this because we need to increment the headers with a
  # number, we might have multipel licenses we may not have a 
  # licenses url for all of them.
  my @urls;
  foreach my $license (@{$ckan->licenses}) {
    push(@urls, $self->license_url($license)) if $self->license_url($license);
  }
  my @url_headers = $self->_archive_header('licenseurl', \@urls) if $urls[0];
  $headers->push_header(@url_headers) if $url_headers[0];

  return $headers;
}

# TODO: This method isn't yet tested
method _put_request( :$headers, :$uri, :$file) {
  return HTTP::Request::StreamingUpload->new(
    PUT     => $uri,
    path    => $file,
    headers => $headers,  
  );
}

# TODO: This method isn't yet tested
method put_item( :$ckan, :$file ) {
  my $request = $self->_put_request(
    headers => $self->_put_headers( $file, $ckan ),
    uri     => $self->_put_uri( $ckan ),
    file    => $file,
  );
  my $res = $self->ua->request($request);
  return $res;
}

#method check_item {
#
#}

with('App::KSP_CKAN::Roles::Logger', 'App::KSP_CKAN::Roles::Licenses');

1;
