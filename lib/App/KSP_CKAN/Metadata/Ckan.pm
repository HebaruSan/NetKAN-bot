package App::KSP_CKAN::Metadata::Ckan;

use v5.010;
use strict;
use warnings;
use autodie;
use Method::Signatures 20140224;
use Config::JSON; # Saves us from file handling
use Carp qw( croak );
use Moo;
use namespace::clean;

# ABSTRACT: Metadata Wrapper for CKAN files

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  use App::KSP_CKAN::Metadata::Ckan;

  my $ckan = App::KSP_CKAN::Metadata::Ckan->new(
    file => "/path/to/file.ckan",
  );

=head1 DESCRIPTION

Provides a ckan metadata object for KSP-CKAN. Has the following
attributes available.

=over

=item identifier

Returns the identifier for the loaded CKAN.

=item kind

Returns the kind of CKAN. Default is 'package', but will return 
'metapackage' for CKANs marked as such.

=item download

Returns the download url or 0 (in the case of a metapackage).

=back

=cut

has 'file'          => ( is => 'ro', required => 1 ); # TODO: we should do some validation here.
has '_raw'          => ( is => 'ro', lazy => 1, builder => 1 );
has 'identifier'    => ( is => 'ro', lazy => 1, builder => 1 );
has 'kind'          => ( is => 'ro', lazy => 1, builder => 1 );
has 'download'      => ( is => 'ro', lazy => 1, builder => 1 );

method _build__raw {
  return Config::JSON->new($self->file);
}

method _build_identifier {
  return $self->_raw->{config}{identifier};
}

method _build_kind {
  return $self->_raw->{config}{kind} ? $self->_raw->{config}{kind} : 'package' ;
}

method _build_download {
  return $self->_raw->{config}{download} ? $self->_raw->{config}{download} : 0;
}

=method is_metapackage

  $ckan->is_package;

Shortcut method so we can test that the CKAN is a package. Returns
'1' if it is a package, otherwise '0'.

=cut

method is_package {
  if ( $self->kind eq 'package' ) {
    return 1;
  }
  return 0;
}

1;
