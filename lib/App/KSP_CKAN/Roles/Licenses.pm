package App::KSP_CKAN::Roles::Licenses;

use v5.010;
use strict;
use warnings;
use autodie;
use Method::Signatures 20140224;
use Moo::Role;

# ABSTRACT: At CKAN we care about licenses

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  with('App::KSP_CKAN::Roles::Licenses');

=head1 DESCRIPTION

We care about licenses deeply. It helps us make decisions about
what we can and can't do with hosted mods. Such as mirroirng.

=cut

has '_license_urls'   => ( is => 'ro', lazy => 1, builder => 1 );

method _build__license_urls {
  return {
    "GPL-2.0"       => 'http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html',
    "CC-BY-NC-SA"   => 'http://creativecommons.org/licenses/by-nc-sa/1.0/', # TODO: Do we consider no version number to be version 1 or the latest?
  }
}

=method redistributable_licenses

  my @licenses = $self->redistributable_licenses;

Returns an array of open source licenses which allow redistribution.

=cut

# This is an array of explicit licenses which are allowed to be mirrored.
# TODO: Maybe we can consume this from somewhere externally.
method redistributable_licenses {
 return [
    "public-domain",
    "Apache", "Apache-1.0", "Apache-2.0",
    "Artistic", "Artistic-1.0", "Artistic-2.0",
    "BSD-2-clause", "BSD-3-clause", "BSD-4-clause",
    "ISC",
    "CC-BY", "CC-BY-1.0", "CC-BY-2.0", "CC-BY-2.5", "CC-BY-3.0", "CC-BY-4.0",
    "CC-BY-SA", "CC-BY-SA-1.0", "CC-BY-SA-2.0", "CC-BY-SA-2.5", "CC-BY-SA-3.0", "CC-BY-SA-4.0",
    "CC-BY-NC", "CC-BY-NC-1.0", "CC-BY-NC-2.0", "CC-BY-NC-2.5", "CC-BY-NC-3.0", "CC-BY-NC-4.0",
    "CC-BY-NC-SA", "CC-BY-NC-SA-1.0", "CC-BY-NC-SA-2.0", "CC-BY-NC-SA-2.5", "CC-BY-NC-SA-3.0", "CC-BY-NC-SA-4.0",
    "CC-BY-NC-ND", "CC-BY-NC-ND-1.0", "CC-BY-NC-ND-2.0", "CC-BY-NC-ND-2.5", "CC-BY-NC-ND-3.0", "CC-BY-NC-ND-4.0",
    "CC0",
    "CDDL", "CPL",
    "EFL-1.0", "EFL-2.0",
    "Expat", "MIT",
    "GPL-1.0", "GPL-2.0", "GPL-3.0",
    "LGPL-2.0", "LGPL-2.1", "LGPL-3.0",
    "GFDL-1.0", "GFDL-1.1", "GFDL-1.2", "GFDL-1.3",
    "GFDL-NIV-1.0", "GFDL-NIV-1.1", "GFDL-NIV-1.2", "GFDL-NIV-1.3",
    "LPPL-1.0", "LPPL-1.1", "LPPL-1.2", "LPPL-1.3c",
    "MPL-1.1",
    "Perl",
    "Python-2.0",
    "QPL-1.0",
    "W3C",
    "Zlib",
    "Zope",
    "WTFPL",
    "open-source", "unrestricted" ];
}

=metho has_license_url

  $self->license_url("GPL-2.0");

We may not have all the URLs for licenses intially. In the fullness
of time this will just prevent errors for new licenses being added
to the spec. Returns a url when it is is known and 0 for no license url.

=cut

method license_url($license) {
  if ( defined $self->_license_urls->{$license} ) {
    return $self->_license_urls->{$license};
  }
  return 0;
}

1;
